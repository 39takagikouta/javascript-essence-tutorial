五章
1.変数
は参照の理解が必要

2.let.const.varの違い
再定義　再代入　スコープ　初期化（ほいスティング）

3データ型　変わらん

4暗黙的な型変換
Jsは動的型付け言語　javaは静的
メリットは記述量が少なく済むこと　デメリットは大規模開発になったら型が追いにくくなるし、型を都度決めないといけないのでパフォーマンスが下がる→小さいプロジェクトに適している
Type of でクラスを調べられる
PerseInt(“1”)とすることで文字列を整数にすることができる

5厳格な等価性と抽象的な等価性
校舎は型変換が自動的に行われる
基本的には前者を使うべき

6falsyとtruthy
falsyはrubyに近いけどもっと拡張されている
例えば、0もfalsyである

7.8and条件とor条件
前者は、右から順にtruthyかfalsyか判断して、falsyだった時点の値を返す　最後まで全てtrueだった場合は最後を返す
後者は逆
グループ（）を用いて条件を書くこともある
booleanじゃなくて普通に値を返すため、関数の引数の値の初期値の設定に使うこともできる
function(name) {
  name = name || "kouta"
}
デフォルト引数を設定することもできる

また、and条件も応用できる
例えば、変数aに値が入っていたら関数を処理を実行する処理は、下記のように簡略化できる
a && hello()

9データ型
にはプリミティブ型とオブジェクトが存在する
前者はimmutable 後者はmutable
オブジェクトは参照を名前付きで管理している入れ物→訳わからん
動画内の画像がわかりやすい　これめっちゃ重要らしい

10参照とコピー
プリミティブ型の参照とコピー
新たな変数に既存の変数をコピーすると、参照先の値自体もコピーされる
だから、新たな変数に値を再代入しても、元からあった変数の値は変わらない
一方、オブジェクトの場合は
変数名→オブジェクトのプロパティの中身への参照→プロパティ→対応する値
という順でメモリの番地に参照が作られる
そして、これをコピーした場合、ふたつ目の「オブジェクトのプロパティの中身への参照」の部分がコピーされ、新たな変数から参照される
だから、例えば新たな変数からプロパティに対応する値を変えたら、元の変数の中のオブジェクトの値も変わる

結論
プリミティブ型は値がコピーされる
オブジェクトは、参照がコピーされる

11参照とconst
const変数にオブジェクトを代入する場合、constは再代入をロックしているが、実際には「変数名→オブジェクトのプロパティの中身への参照」の部分をロックしているだけであり、以降はロックされていない
だから、普通に新しいプロパティと値を追加したり、値を修正したりはできる

12参照と引数
関数の引数にプリミティブ型かオブジェクトが渡される際も、11と同じことが起こっている

13分割代入と参照
これも11と一緒やな　分割代入はオブジェクトを渡しているから→ちょっとよくわからんかった

