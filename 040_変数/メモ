四章
・スコープ
とは、実行中のコードから値と式が参照できる範囲

・スクリプトスコープとグローバルスコープ
コードの中のどこからでもアクセス可能
グローバルオブジェクトは省略可能
グローバルコンテキストの中で定義した変数や関数は、グローバルスコープかスクリプトスコープに分けられる
グローバルスコープ＝windowオブジェクト
どちらも呼び出し方は同じなので、両方ともグローバルスコープと呼ばれることが多い
しかし、それが絡んでどちらの変数が優先されるかとかもあるので、この分類は覚えておく

・関数スコープとブロックスコープ
前者は関数の中で定義されたものの範囲
後者はブロック{}の中で定義されてるやつ（モジュールみたいなもんか）
けど、関数とvarはブロックを貫通するから使わない
関数を使う場合は関数式で使う

・コンテキストとスコープの関係
グローバルコンテキストの中で使える関数や変数がグローバルスコープ＝スクリプトスコープ
関数コンテキストの中で使える関数や変数が関数スコープ

・レキシカルスコープ
Watchのところで変数を検索することで定義されているか調べられる
コンソールで打っても同じ
親のスコープとグローバルスコープ使えるってことか
自分のスコープじゃないけど親やから使えるスコープ＝レキシカルスコープ＝外部変数、外部スコープ
本語には、「どのようにしてスコープを決定するかの仕様のこと」という意味もある（静的スコープともいう）

・スコープチェーン
同じ名前の変数が定義されている場合、最も近い階層のものから取ってくる
また、ホイスティングも影響する　
Let a =1
function(){
	console.log(a);
	let a =2
}
この場合、ホイスティングが発生して、aがundifinedですエラーが出る

・クロージャー
レキシカルスコープの変数を関数が使用している状態

・クロージャー（プライベート関数）
JavaScriptにおけるクロージャーは、関数内部で作成された変数をその関数内部のさらに内部にある関数からアクセス可能にする特性です。この特性を利用すると、外部からはアクセスできないプライベート変数を実装することができます。
Jsでは、返り血に関数を入れることもできる
変数に入れることもできるし、一つの値みたいに使えるんだな

・クロージャー（動的な関数の作成）
上とこれよくわからん

・即時関数
（）の意味　1関数呼び出し　2グループか
関数式を括る括弧は2の用途
文字方と整数型足せるんや
Returnのところにオブジェクトリテラルを書いたら、外からアクセスできる
特徴　1関数定義時に呼び出されること　2変数はreturnに設定したもの
変数に代入する際は、グループ化のための括弧は必要ないが、基本的にそれはしない
オブジェクトリテラル
変数名 : プロパティ（キー）になっている
オブジェクトを代入するみたいになるってことか
クロージャーと同じく、プライベート関数みたいな感じで使う
