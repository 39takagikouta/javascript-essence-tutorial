1ブラウザとスレッド
スレッドとは、連続して実行される一本の処理の流れ
色々なスレッドがあるが、基本的にjsはメインスレッドというものの上で動く
これは、jsの実行とレンダリング（画面描画）を行う　多忙なスレッド
Fpsという概念がある　30〜60なら違和感がない　液晶テレビは60 60に近づけることが大事
思い処理があると、レンダリングに時間がかかる

2同期処理と非同期処理
動画がわかりやすい
同期処理ではメインスレッドで処理が順番に実行される　だから処理が完了するまで次には進まない
非同期処理は一時的にメインスレッドから処理が切り離される
具体例
非同期API
setTimeout
Promise
queueMicrotask

UIイベント
クリック

3タスクキュートとコールスタック
タスクキューとは実行待ちの非同期処理の行列　非同期処理の実行順を管理している
タスクに関するキューという箱
キューは先入先出　ロケット鉛筆方式
タスクキューとコールスタックは関連性がある
イベントループがコールスタックが開いているかを管理し、開いたら先入先出でタスクを入れてく

4コールバック関数と非同期処理
前者を使うことで、コールスタックとタスクキューの性質を利用して関数を実行する順序をコントロールすることができる（動画参照）

5非同期処理のチェーン
同じコールバック関数を何層にも書くことで非同期処理を連続して行うことができるが、promisのが便利らしい

6promise
よぶ側じゃなくて、関数によばれる側の関数がコールバック関数なんやな
使い方は動画を参照
とにかくpromis以外（then,catch,finally）は全て非同期処理